import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from loguru import logger
from config import BOT_TOKEN, CHROMA_PATH, COLLECTION_NAME, GIGACHAT_CLIENT_SECRET,JSON_PATH
from api_utils.gigachat_api_utils import get_token, get_answer
from parser.links import LINKS
from vec_db.vec_db import get_context, initialize_db

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

db = asyncio.run(initialize_db(CHROMA_PATH, COLLECTION_NAME, JSON_PATH, LINKS))


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_message = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç</b>"
        "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ <b>EORA</b>. \n\n"
        "–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã."
    )
    await message.answer(welcome_message, parse_mode=ParseMode.HTML)


@dp.message(F.text)
async def handle_text(message: types.Message):

    context = get_context(db, message.text)
    prompt = f"""
            –¢—ã ‚Äî –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ EORA. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞: 
            "–ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏...", "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–Ω–µ–¥—Ä–∏–ª–∞...", "–í –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ...".  

            –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞:  
            {context}  

            –í–æ–ø—Ä–æ—Å: {message.text}  
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–Ω–æ–º–µ—Ä](url).
            –ü—Ä–∏–º–µ—Ä:

            –í–æ–ø—Ä–æ—Å: "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è Lamoda?"
            –û—Ç–≤–µ—Ç:
            "–ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–µ–π –æ–¥–µ–∂–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ API –¥–ª—è –ø–æ–∏—Å–∫–∞ [1](url).
            –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–ª–∞ —É–¥–æ–±–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö [1](url)."
    """
    try:
        token = await get_token(GIGACHAT_CLIENT_SECRET)
        answer =  await get_answer(prompt, token)
        await message.answer(answer, parse_mode=ParseMode.MARKDOWN)
    except Exception as ex:
        print('–û—à–∏–±–∫–∞: ', ex)
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫(')


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    logger.success('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    asyncio.run(main())
